[user]
	name = Anton Galitsyn
	email = agalitsyn@users.noreply.github.com
[color]
    diff = auto
    status = auto
    interactive = auto
    branch = auto
[alias]
    f = fetch --all --prune
    pu = pull
    co = checkout
    st = status
    br = !git --no-pager branch
    brs = for-each-ref --sort=committerdate --format='%(refname:short) * %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'
    ci = commit
    dh = diff HEAD
    dc = diff --cached
    nmerge = merge --no-ff
    unstage = reset HEAD --
    rsh = reset --hard
    clh = clean -fdx
    rollback = reset --soft HEAD~1
    unmerged = log --no-merges master..
    last = log -1 HEAD
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches
	dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
    smb = submodule update --init --recursive
    sha = rev-parse HEAD
	it = !git init && git commit -m “root” --allow-empty
	commend = commit --amend --no-edit
	please = push --force-with-lease

    # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"
[log]
    date = local
[core]
    filemode = false
	excludesfile = /Users/anton/.gitignore
	autocrlf = input
[push]
    default = simple
# go get fixes
# [url "git@github.com:"]
#	insteadOf = https://github.com/
#[url "git@bitbucket.org:"]
#	insteadOf = https://bitbucket.org/
[http "https://gopkg.in"]
	followRedirects = true

